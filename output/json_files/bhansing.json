{"user_id":"bhansing","read_me":"# Collections\n\nThis week introduces Java collections - `Array` and `ArrayList` - as a way of organizing groups of objects.\n\n### üíÄ Deadline\nThis work should be completed before the exercise on **Friday 4 October**.\n\n### üë©‚Äçüè´ Instructions\nFor instructions on how to do and submit the assignment, please see the\n[assignments section of the course instructions](https://gits-15.sys.kth.se/inda-24/course-instructions#assignments).\n\n### üìù Preperation\n\n- Review the [lecture slides](https://docs.google.com/presentation/d/1qIjQ10Dy7RW00wit0Ud5vX_012pH_1chOcuvpkt03cg/edit#slide=id.p)\n- Read and answer all questions in [Module 5: Grouping Objects](https://qbl.sys.kth.se/sections/dd1337_programming/container/grouping_objects)\n\n### ‚úÖ Learning Goals\nThis week's learning goals include:\n\n* Working with `Arrays`\n* Understanding the `static` keyword\n* Working with `ArrayLists`\n* Combining loops and collections\n\n### üö® Troubleshooting Guide\nIf you have any questions or problems, follow this procedure: <br/>\n\n1. Look at this week's [posted issues](https://gits-15.sys.kth.se/inda-24/help/issues). Are other students asking about your problem?\n2. If not, post a question yourself by creating a [New Issue](https://gits-15.sys.kth.se/inda-24/help/issues/new). Add a descriptive title, beginning with \"Task *x*: *summary of problem here*\"\n3. Ask a TA in person during the [weekly lab](https://queue.csc.kth.se/Queue/INDA). Check your schedule to see when the next lab is.\n\nWe encourage you to discuss with your course friends, **but do not share answers!** Similarily, use of any AI services ü§ñ are great to help explain things, **but please do not submit AI-generated solutions** - you must be both responsible for your own solutions and must be able to explain them under examination.\n\n### üèõ Assignment\nMost programming languages have several _data structures_ as a part of the language. These allow the programmer to store and operate on data in various ways, with different characteristics and strengths. In Java, the most simple data structure is the *array* (svensk √∂vers√§ttning: *samling*), as explained in [Oracle's Offical Java Tutorial](https://docs.oracle.com/javase/tutorial/java/nutsandbolts/arrays.html).\n\n<details>\n  <summary> üìö A summary of Java's arrays </summary>\n\n The following code shows various ways to create arrays. Most programming languages are *0-indexed*, so in order to access the first element of an array, you have to start from zero:\n\n```\narray: | a | b | c | d |\nindex:   0   1   2   3\n```\n\nArrays have a special syntax in Java:\n\n```java\npublic class Arrays {\n   public static void main(String[] args) {\n    // Create an array called 'array'\n    int[] array;\n\n    // Allocate memory for 4 integers\n    array = new int[4];\n\n    // Assign values by accessing their index\n    array[0] = 1; // This is the first element\n    array[1] = 3; // This is the second element\n    array[2] = 3; // and so forth\n    array[3] = 7;\n   }\n}\n```\n\nTo help remember this fact, think of the index as how many elements you skip over. That is, `a[0]` gives us the first element in `a` since we skip over 0 elements.\nJava allows you to create arrays using curly brackets (`{}`) too:\n\n```java\npublic class Arrays {\n  public static void main(String[] args){\n    // Create an array and assign four values\n    int[] array = {0, 1, 2, 3};\n  }\n}\n```\n\nThe `for` loop is useful in combination with arrays:\n\n```java\npublic class Arrays {\n  public static void main(String[] args){\n    // Create an array and assign five strings\n    String[] array = {\"Never\", \"Gonna\", \"Give\", \"You\", \"Up\"};\n\n    // Print each element\n    for(int i = 0; i < array.length; i++){\n      System.out.println(array[i]);\n    }\n  }\n}\n```\n\nMethods can take arrays as parameters, and have arrays as return types:\n\n```java\npublic class Arrays {\n\n  /**\n   * A method to calculate the sum of an integer array\n   */\n  public double sum(int[] input){\n    double sum = 0;\n    for(int i = 0; i < input.length; i++){\n      sum += input[i];\n    }\n    return sum;\n  }\n\n  /**\n   * Returns an array with three zeros, as an example of methods returning arrays.\n   */\n  public int[] zeroArray() {\n    // Create an array with space for three elements.\n    int[] zeroArray = new int[3];\n    // Fill it with zeros\n    zeroArray[0] = 0;\n    zeroArray[1] = 0;\n    zeroArray[2] = 0;\n    // Return it\n    return zeroArray;\n  }\n}\n```\n---\n</details>\n\n<details>\n<summary> üìö The foreach loop </summary>\n\nJava has a special loop called the `foreach` loop. It is also known as *the enhanced for loop*.\nThe `foreach` loop offers you a convenient way to iterate each member of\na collection, in order:\n\n```java\nfor (TYPE name : COLLECTION) {\n    // Do something with object 'name'\n}\n```\n  \nThe loop reads as _\"for each object *name* of type *TYPE* in *COLLECTION*...\"_. \nAssuming that `myArray` is an array of `Double`, the above example can be rewritten as:\n\n```java\nfor (Double element : myArray) { \n// Read as ``For each \"element\" of type \"Double\" in \"myArray\"...¬¥¬¥\n    doSomething(element);\n}\n```\n\nThe `COLLECTION` may be an array, but could also be some other Java class that supports iteration,\nsuch as `ArrayList`, which will be further explained as we progress in this task.\nYou can read more about the different types of for-statements in the official\n[Oracle tutorial](https://docs.oracle.com/javase/tutorial/java/nutsandbolts/for.html).\n\n---\n</details>\n\n<details>\n  <summary> üìö The static keyword</summary>\n\nYou will notice that all method headers that you are asked to add to your\n`Arrays.java` file has the `static` keyword between the access modifier\nand the return type. You may also have seen this keyword in the header of the\nmain method and wondered what it means. `static` means that a field or\nmethod is particular to the _class_ rather than any specific _object_\n(remember that a _class_ can be used as a \"template\" to create many\ndifferent _objects_). For instance, if you created a `Clock` class,\nand added the field `private static int hours`, this value would be\nshared between every `Clock` object you create, so that they all are\nset to the same hour.\n\nA `static` method is a method that will behave the same for every\nobject of a class. This means that instead of creating an object we can\ncall the method directly in the class, so instead of writing\n```java\nArrays arraysInstance = new Arrays();\nint averageOfSomeArray = arraysInstance.average(someArray);\n```\nwe can write\n```java\nint averageOfSomeArray = Arrays.average(someArray);\n```\nYou may have already seen this way of calling a method when using methods\nfrom the `Math` library. A `static` method can _only_ use fields and\ncall other methods that are also `static`, but makes your code simpler\nand more efficient. Since all the methods we will be adding to the\n`Arrays` class doesn't need to access any fields at all it makes sense\nto keep them `static`.\n\nYou can read more about the `static` keyword in the\n[Official Java Tutorial](https://docs.oracle.com/javase/tutorial/java/javaOO/classvars.html).\n\n---\n</details>\n\n#### Exercise 5.0 -- The Arrays class\nBegin by creating a new class where you will enter your solutions for the coming exercises. \nThis class should be called `Arrays` and be in a file called `Arrays.java` in the [src](src) folder.\n\n#### Exercise 5.1 -- Average of an array\n\nWrite a method that returns the average of an array with the following header:\n\n```java\npublic static int average(int[] array)\n```\n\n> **Assistant's Note:** The average should be rounded down to the closest integer. Remember that integer division by default *rounds down*, so the average of `{1, 2, 3, 4}` is *2*. \n\n#### Exercise 5.2 -- Average of an array... again?\nWrite another method that returns the average of an array, this time with the header:\n\n```java\npublic static double average(double[] array)\n```\n\n> **Assistant's note:** Once again we use [function overloading](https://en.wikipedia.org/wiki/Function_overloading). Since the parameters differ between the methods, it is fine for them to have the same name. In this case, the parameters differ in their type -- `int[]` vs. `double[]` -- so it is okay for them to share the same name.\n\n\n#### Exercise 5.3 -- Smallest element of an array\nWrite a method that returns the smallest element of an array. It must have the following header:\n\n```java\npublic static int smallestElement(int[] array)\n```\nIf the array is empty it should return the highest integer value instead. To obtain the maximum integer value you can call `Integer.MAX_VALUE;`.\n\n<details>\n    <summary> üìö Why is there a maximum integer value? </summary>\n\nTo store integers in the computer memory we use a fixed number of bits so that we can keep track of how much computer memory needs to be allocated. Specifically, Java uses 32 bits to represent integer values of type `int`. Each bit can be either on or off (0 or 1) The maximum value that can be represented using 32 bits is 2^31 - 1, which equals 2,147,483,647.\n\nThe reason for this limit is due to the way integers are stored in binary format. In a 32-bit `signed integer`, the leftmost bit is used as the sign bit (0 for positive, 1 for negative), and the remaining 31 bits are used to represent the magnitude of the number. The sign bit effectively reduces the range of positive values by one bit.\n\nWith 31 bits available for the magnitude, the maximum positive value that can be represented is when all 31 bits are set to 1, which corresponds to the decimal value 2^31 - 1.\n\nIf you attempt to assign a value larger than the maximum integer value to an int variable, it will result in an overflow, and the value will wrap around to the minimum integer value (2^31, or -2,147,483,648) and continue counting from there. This behavior is known as `integer overflow`.\n\n  <details>\n    <summary> Why -2,147,483,648? </summary>\nIn Java, the int data type uses 32 bits of memory. A \"bit\" is the most basic unit of information in computing and can be either a 0 or a 1. You can actually represent integers with their binary representation in java:\n\n```java\n// integer '0' in its binary representation\nint a = 0b00000000000000000000000000000000; // thirty-two 0's!\n// integer '1' in its binary representation\nint b = 0b00000000000000000000000000000001; // note the one\n// integer '2' in its binary representation\nint c = 0b00000000000000000000000000000010; \n```\n\nSo, why does this matter? Well, the number of different combinations we can get with 32 bits determines the range of numbers an int can represent.\n\nBut there's a catch: one of these bits is used to represent whether the number is positive or negative. So, we're really left with 31 bits to store the actual number. Look at how `-1` is represented:\n\n```java\n// integer '-1' in its binary representation\n// the leftmost 1, right after the 'b', signal this is a negative number\nint a = 0b11111111111111111111111111111111;\n```\n\nTh binary representation of negative numbers have their own logic, called the [Two's Complement](https://en.wikipedia.org/wiki/Two%27s_complement). Using these 31 bits, the largest positive number we can represent is 2,147,483,647 (or 2^31 - 1), and that's why this is the maximum integer value in Java. After that, there just aren't enough different bit combinations left to represent any larger numbers. You are going to learn how this works as you progress you studies at KTH Royal Institute of Technology!\n  </details>\n</details>\n\n> **Assistant's note:** By _smallest_, we mean the one closest to -‚àû. \n\n#### Exercise 5.4 -- Reverse\nWrite a method that takes an `int` array and returns a copy of this \narray with the elements in _reverse order_. It should have the following header:\n```java\npublic static int[] reverse(int[] array)\n```\n\nHere is an example of how it should work:\n```java\nint[] array = {1, 2, 3};\nint[] reversed = reverse(array);\n// The reversed array should be {3, 2, 1}\n```\nMake sure to not modify the original array. Your method should \ncreate a new array.\n\n#### Exercise 5.5 -- Return all even numbers in an array\nCreate a method that returns all *even* numbers in an array. It should have the following header:\n\n```java\npublic static int[] evenNumbers(int[] array)\n```\nThis method should _not_ modify the original array that's provided as a parameter. It should simply create a new \narray containing all the even numbers (in the same order) from the original array.\n\n> **Assistant's note:** One approach is to use two `for` loops - first, one to count the number of even numbers in order to create a new array with the right size, and then one loop to copy all even numbers. A number *n* is even if *n ‚â° 0 (mod 2)*. You should use the [remainder operator](https://docs.oracle.com/javase/tutorial/java/nutsandbolts/op1.html) for this purpose.\n\n### Set Theory\n\nArrays are very useful for storing a specific number of elements of the same type,\nbut what if you don't know ahead of time how many objects you need to store?\nIn order to handle this, the Java standard library includes the class\n[`ArrayList`](https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/ArrayList.html)\nwhich is quite similar to an array, but lets you grow the number of\nelements stored as needed.\n\n Your task at hand is now to model mathematical sets with `ArrayLists`. A set is defined as having *unique* elements. For example, *{1, 2, 2, 3}* is **not** a set, whereas *{1, 2, 3}* is a set. It is up to your implementations to guarantee this assumption. In this assignment, we refer to the *universe* by the following definition:\n\n<img src=\"images/universe.png\" alt=\"universe\" width=\"200\"/>\n\n\nThat is, the universe is the set of all integers from 0 to 99.\n\n> **Assistant's note:** In programming, there are other data structures that should be used in place of `ArrayLists` when modeling sets, for example [HashSets](https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/HashSet.html). But for the purpose of this exercise, you have to *suspend reality* and please do not use the obvious solution for this exercise.\n\n\n<details>\n  <summary> üìö Algebra of sets </summary>\n\n  The Wikipedia article on [Algebra of sets](https://en.wikipedia.org/wiki/Algebra_of_sets) can serve as a reminder of the fundamental properties of set algebra. This is also covered in SF1671, which you have in parallel to DD1337. To pass the assignment, make sure you test the following cases:\n\n<img src=\"images/algebra-of-sets.png\" alt=\"algebra of sets\" width=\"150\"/>\n\n\n  The *cardinality* of a set is the number of elements it contains.\n\n<img src=\"images/cardinality-of-union.png\" alt=\"The cardinality of a union of two sets\" width=\"400\"/>\n\n---\n</details>\n\n<details>\n<summary> üìö A summary of Java's ArrayLists</summary>\n\nIn order to use an `ArrayList` you must first _include_ it in your class file.\nYou do this by adding the line\n```java\nimport java.util.ArrayList;\n```\nat the top of the file. This tells the Java compiler to look for the\nclass called `ArrayList` in the `util` (utilities) package.\n\nCreating an `ArrayList` looks slightly different from creating an array.\nTo create an `ArrayList` containing `Integer`s, the syntax is\n```java\nArrayList<Integer> integerList = new ArrayList<>();\n```\n`ArrayList` is a class like any other, so we use the\n`new ClassName();` syntax. However, you might be wondering what is going\non with the `<>` symbols. The `<Integer>` after\nthe class name tells Java that this `ArrayList` will contain `Integer`\nobjects, just like you could create an array of type `Integer[]`.\nThe word in `<>` could of course be the name of any class, but _not_\na generic type (such as `int`). If you try something like\n```\nArrayList<int> intList = new ArrayList<>();\n```\nyou will get a compile error (try it!). This concept of specifying that a class \nwill contain or otherwise use a particular type of object is called `generic` types in Java.\nYou don't need to understand it fully right now, but you can read more about it in the\n[Oracle Java tutorial](https://docs.oracle.com/javase/tutorial/java/generics/types.html).\n\nYou can add new elements to your `ArrayList` with the `add` method,\nand change the value of an element with the `set` method:\n```java\nintegerList.add(5);\nintegerList.set(0, 11); // First element will now be 11\n```\n\nYou can get elements at a specific index with the `get` method:\n```java\nint firstValue = integerList.get(0);\n```\nnote that `ArrayLists` are 0-indexed just like arrays.\nYou might remember that `integerList` contains `Integer`s, but\nin this example, we store the return value as an `int`. In general,\nJava can automatically convert between\n[primitive types](https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html)\nand the corresponding [wrapper classes](https://en.wikipedia.org/wiki/Primitive_wrapper_class_in_Java).\n\nYou can remove an object from your `ArrayList` using the `remove` method.\nYou can also remove _all_ the elements with the `clear` method.\n```java\nintegerList.remove(0); // Will remove the first element\nintegerList.clear(); // Will remove everything that's left in the list\n```\n\nYou can check how many elements are in an `ArrayList` using the `size` method.\nThis can be useful when you want to use a for-loop to iterate over your list.\n```java\n// Increase the value of every element by 1:\nfor (int i = 0; i < integerList.size(); i++) {\n    int currentElement = integerList.get(i);\n    currentElement += 1;\n    integerList.set(i, currentElement);\n}\n```\n----\n</details>\n\n<details>\n  <summary> üìö Importing libraries and API </summary>\n\nThe Java SDK includes a vast amount of *libraries*, which are predefined classes you may use in your programs. Each library has an *Application Programming Interface* (API). The API is all the public methods in the class that you, as an outside programmer, can use to interact with the library. If you want to use an `ArrayList` in your program, you must first *import* the library:\n\n  ```java\n  import java.util.ArrayList; // Use the keyword 'import' to be able to use the ArrayList class\n  \n  public class Example {\n    // Add some code using an ArrayList here\n  }\n  ```\n\nThe API of `ArrayList` consists of all the methods it contains that are available for you to use.\nFor example, `add()`, `get()`, and `isEmpty()`, are all a part of the ArrayList API. The rest of the API can be found in Oracle's [ArrayList documentation](https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/ArrayList.html). The fastest way to find the documentation of any Java Class is to use Google Search: \"<*library*> documentation\", although they are all listed [here](https://docs.oracle.com/en/java/javase/17/docs/api/java.base/module-summary.html).\n\n---\n</details>\n\n#### Exercise 5.6 -- `SetTheory.java` and `generateSet`\nBegin by creating a file called `SetTheory.java` in the [`src`](/src) folder. \nAll remaining methods for this task should be placed in this file.\n\nCreate a method with the header\n```java\npublic static ArrayList<Integer> generateSet(int min, int max)\n```\n\nThis method should return an `ArrayList` with all elements between `[min, max)` (including min and excluding max). \nRemember that a *set* consists only of *unique* elements! If `min ‚â• max`, return an empty list. \nIf `max > 100`, you should create a set containing all integers between `min` and 99.\nSimilarly, if `min < 0` return the set containing values between `0` and `max`.\nWe provide you with an example of a main method that could be added to `SetTheory.java`\nand help you make sure that your code works as specified. Alternatively, you can\nuse [JShell](https://docs.oracle.com/javase/9/jshell/introduction-jshell.htm)\nto run your code without a main method.\n\n<details>\n  <summary> üõ† Example main method</summary>\n  \n```Java\n// Example call\npublic static void main(String[] args){\n  // call the \"generateSet\" method on the SetTheory object\n  ArrayList<Integer> exampleSet = generateSet(10, 15);\n\n  // if implemented correctly, \"exampleSet\" should be an ArrayList of the five integers between `[10, 14]`\n  // [10, 11, 12, 13, 14]\n  System.out.println(exampleSet);\n}\n```\n</details>\n\n\n#### Exercise 5.7 -- union\nImplement a method called `union` that finds the union of two sets. It must have the following header:\n\n```java\n  public static ArrayList<Integer> union(ArrayList<Integer> a, ArrayList<Integer> b)\n```\n\nIt should return a new `ArrayList` containing the elements from the union of lists `a` and `b`. \nUse your implementation of `generateSet` to test your solution. \nMake sure that the returned `ArrayList` is a *set*, that is, it only contains *unique* elements.\n\n> **Assistant's note:** Consider the edge case mentioned under \"Algebra of sets\". Make sure you understand and handle those cases correctly. You can check if an `ArrayList` contains an element by invoking the `contains` method. Other useful methods are explained in the [official documentation of the ArrayList class](https://docs.oracle.com/en/java/javase/17/docs/api/java.base/java/util/ArrayList.html).\n\n#### Exercise 5.8 -- intersection\nImplement a method called `intersection` that finds the intersection of two lists. It should return a new `ArrayList` with the intersection of the input. It must have the following method header:\n\n```java\npublic static ArrayList<Integer> intersection(ArrayList<Integer> a, ArrayList<Integer> b)\n```\n\n> **Assistant's note:** Consider the edge case mentioned under \"Algebra of sets\". Make sure you understand and handle those cases correctly.\n\n#### Exercise 5.9 -- complement\n\nMake a method called `complement`, that returns the complement of the input set, that is, it returns an `ArrayList` of all integers between `0` and `99` *not* included in the provided set. It must have the following header:\n  \n```java\npublic static ArrayList<Integer> complement(ArrayList<Integer> a)\n```\n\n#### Exercise 5.10 -- cardinality\nMake a method called `cardinality`, that returns the *cardinality* of a set. It must have the following method header:\n\n```java\npublic static int cardinality(ArrayList<Integer> a)\n```\n\nWe provide you with an example of how the `main` method could look when testing your solution:\n\n<details>\n  <summary> üõ† Example main method </summary>\n\n```java\npublic static void main(String[] args) {\n  // make a set\n  ArrayList<Integer> a = generateSet(0, 5)\n\n  // call the \"cardinality\" method of the \"SetTheory\" object and store the result in an integer\n  int cardinality = cardinality(a);\n\n  // should print \"5\" to the terminal\n  System.out.println(cardinality)\n\n}\n```\n</details>\n\n\n#### Exercise 5.11 -- cardinality of union\nMake another method called `cardinalityOfUnion`, which returns the *cardinality* of the union of two sets, *A* and *B*, that is, |*A* U *B*|. It must have the following method header:\n\n```java\npublic static int cardinalityOfUnion(ArrayList<Integer> a, ArrayList<Integer> b)\n```\n\n### ‚ùé Checklist\n- [ ] Exercises in `Arrays.java`:\n  - [ ] Calculate the integer average of an array. `public static int average(int[] array)`\n  - [ ] Calculate the double average of an array. `public static double average(double[] array)`\n  - [ ] Get the smallest integer of an array. `public static int smallestElement(int[] array)`\n  - [ ] Reverse an array. Don't affect the original array. `public static int[] reverse(int[] array)`\n  - [ ] Get all even numbers from an array. `public static int[] evenNumbers(int[] array)`\n- [ ] Exercises in `SetTheory.java`:\n  - [ ] Generate a new set using `public static ArrayList<Integer> generateSet(int min, int max)`, include min and exclude max. \n    - [ ] Only unique elements may occur. \n    - [ ] Only integers between 0 and 99 are accepted. \n  - [ ] Take the union of two ArrayLists. `public static ArrayList<Integer> union(ArrayList<Integer> a, ArrayList<Integer> b)`\n  - [ ] Take the intersection of two ArrayLists. `public static ArrayList<Integer> intersection(ArrayList<Integer> a, ArrayList<Integer> b)`\n  - [ ] Take the complement of an ArrayLists inside the *universe*. `public static ArrayList<Integer> complement(ArrayList<Integer> a)`\n  - [ ] Calculate the cardinality of an ArrayList. `public static int cardinality(ArrayList<Integer> a)`\n  - [ ] Calculate the cardinality of an union of two ArrayLists. `public static int cardinalityOfUnion(ArrayList<Integer> a, ArrayList<Integer> b)`\n\n> **Assistant's note:** We have added this checklist for you to make a final check before handing in your work. You don't have to tick the boxes unless you want to (to tick a box, place an \"x\" within the brackets when editing the README.md)\n  \n### üêû Bugs and errors?\nIf you find any inconsistencies or errors in this exercise, please open a [New Issue](https://gits-15.sys.kth.se/inda-24/help/issues/new) with the title \"Task *x* Error: *summary of error here*\". Found bugs will be rewarded by mentions in the acknowledgment section.\n\n### üôè Acknowledgment\nThis task was designed by                <br>\n[Linus √ñstlund](mailto:linusost@kth.se)  <br>\n[Sofia Bobadilla](mailto:sofbob@kth.se)  <br>\n[Gabriel Skoglund](mailto:gabsko@kth.se) <br>\n[Arvid Siberov](mailto:asiberov@kth.se)  <br>\n[Alexander Runebou](alerun@kth.se)   <br>\n\nProofreading & Bug fixes by <br>\n[Jimmy Tran]()          <br>\n[Edwin W√§stlund]()      <br>\n","source_files":[{"filename":"SetTheory.java","content":"import java.util.ArrayList;\nimport java.util.Collections;\n\npublic class SetTheory {\n    public static ArrayList<Integer> generateSet(int min, int max) {\n        ArrayList<Integer> numbers = new ArrayList<Integer>();\n        if(max>100) {\n            max=100;\n        }\n        if(min<0) {\n            min=0;\n        }\n        for(int i=min;i<max;i++) {\n            numbers.add(i);\n        } \n        numbers.sort(null);\n        return numbers;\n    }\n\n    public static ArrayList<Integer> union(ArrayList<Integer> a, ArrayList<Integer> b) {\n        ArrayList<Integer> numbers = new ArrayList<Integer>();\n        for(int i=0;i<a.size();i++) {\n            if(!numbers.contains(a.get(i))) {\n                numbers.add(a.get(i));\n            }\n        }\n        for(int i=0;i<b.size();i++) {\n            if(!numbers.contains(b.get(i))) {\n                numbers.add(b.get(i));\n            }\n        }\n        numbers.sort(null);\n        return numbers;\n    }\n\n    public static ArrayList<Integer> intersection(ArrayList<Integer> a, ArrayList<Integer> b) {\n        ArrayList<Integer> numbers = new ArrayList<Integer>();\n        for(int i=0;i<a.size();i++) {\n            if(b.contains(a.get(i))) {\n                if(!numbers.contains(a.get(i))) {\n                    numbers.add(a.get(i));\n                }\n            }\n        }\n        for(int i=0;i<b.size();i++) {\n            if(a.contains(b.get(i))) {\n                if(!numbers.contains(b.get(i))) {\n                    numbers.add(b.get(i));\n                }\n            }\n        }\n        numbers.sort(null);\n        return numbers;\n    }\n\n    public static ArrayList<Integer> complement(ArrayList<Integer> a) {\n        ArrayList<Integer> numbers = new ArrayList<Integer>();\n        for(int i=0;i<100;i++) {\n            if(!a.contains(i)) {\n                numbers.add(i);\n            }\n        }\n        numbers.sort(null);\n        return numbers;\n    }\n\n    public static int cardinality(ArrayList<Integer> a) {\n        ArrayList<Integer> numbers = new ArrayList<Integer>();\n        for(int i=0;i<a.size();i++) {\n            if(!numbers.contains(a.get(i))) {\n                numbers.add(a.get(i));\n            }\n        }\n        return numbers.size();\n    }\n\n    public static int cardinalityOfUnion(ArrayList<Integer> a, ArrayList<Integer> b) {\n        ArrayList<Integer> numbers = new ArrayList<Integer>();\n        for(int i=0;i<a.size();i++) {\n            if(!numbers.contains(a.get(i))) {\n                numbers.add(a.get(i));\n            }\n        }\n        for(int i=0;i<b.size();i++) {\n            if(!numbers.contains(b.get(i))) {\n                numbers.add(b.get(i));\n            }\n        }\n        return numbers.size();\n    }\n\n\n\n    public static void main(String[] args) {\n\n        ArrayList<Integer> exampleSet1 = generateSet(-10, 12);\n        ArrayList<Integer> exampleSet2 = generateSet(10, 15);\n        Collections.reverse(exampleSet1);\n        Collections.reverse(exampleSet2);\n\n        System.out.println(exampleSet1);\n        System.out.println(exampleSet2);\n        System.out.println(union(exampleSet1, exampleSet2));\n        System.out.println(intersection(exampleSet1, exampleSet2));\n        System.out.println(complement(exampleSet1));\n        System.out.println(cardinality(exampleSet1));\n        System.out.println(cardinalityOfUnion(exampleSet1, exampleSet2));\n\n        \n    }\n}\n"},{"filename":"Arrays.java","content":"import java.io.*;\n\npublic class Arrays {\n\n    public static int[] trashSort(int[] array) {\n        int tempSortValue = 0;\n        boolean sortCheck = true;\n        while(sortCheck) {\n            sortCheck = false;\n            for(int i=0;i<array.length-1;i++) {\n                if(array[i] > array[i+1]) {\n                    tempSortValue = array[i];\n                    array[i] = array[i+1];\n                    array[i+1] = tempSortValue;\n                    sortCheck = true;\n                }\n            }\n        }\n        return array;\n    }\n    \n    public static int average(int[] array) {\n        int sum=0;\n        for(int i=0;i<array.length;i++) {\n            sum+=array[i];\n        }\n        return sum/array.length;\n    }\n\n    public static double average(double[] array) {\n        double sum=0;\n        for(int i=0;i<array.length;i++) {\n            sum+=array[i];\n        }\n        return sum/array.length;\n    }\n\n    public static int smallestElement(int[] array) {\n        if(array.length==0) {\n            return Integer.MAX_VALUE;\n        }\n        else {\n            array = trashSort(array);\n        return array[0];\n        }\n    }\n\n    public static int[] reverse(int[] array) {\n        int[] newArray = array;\n        System.out.println(array.length);\n        for(int i=0;i<array.length;i++) {\n            newArray[i] = array[array.length-1-i];\n        }\n        return newArray;\n    }\n\n    public static int[] evenNumbers(int[] array) {\n        int evenCount=0;\n        for(int i=0;i<array.length;i++) {\n            if(array[i] % 2==0) {\n                evenCount++;\n            }\n        }\n        int[] evenArray = new int[evenCount];\n        int j=0;\n        for(int i=0;i<array.length;i++) {\n            if(array[i] % 2==0) {\n                evenArray[j]=array[i];\n                j++;\n            }\n        }\n        return evenArray;\n    }\n\n\n    public static void main(String[] args) {\n        int[] testingArr = {10000,10000,10000,10000,-0,10,-20,-10};\n        System.out.println(average(testingArr));\n        //System.out.println(average(testingArr));\n        System.out.println(smallestElement(testingArr));\n        System.out.println((testingArr));\n        System.out.println(evenNumbers(testingArr));\n        \n    }\n}\n"}],"test_results":"JUnit version 4.12\n.6\n......6\nE.....................\nTime: 0.023\nThere was 1 failure:\n1) reverseDoesNotModifyOriginalArray(ArraysTest)\narrays first differed at element [0]; expected:<1> but was:<0>\n\tat org.junit.internal.ComparisonCriteria.arrayEquals(ComparisonCriteria.java:55)\n\tat org.junit.Assert.internalArrayEquals(Assert.java:532)\n\tat org.junit.Assert.assertArrayEquals(Assert.java:416)\n\tat org.junit.Assert.assertArrayEquals(Assert.java:427)\n\tat ArraysTest.reverseDoesNotModifyOriginalArray(ArraysTest.java:76)\n\tat java.base/jdk.internal.reflect.DirectMethodHandleAccessor.invoke(DirectMethodHandleAccessor.java:104)\n\tat java.base/java.lang.reflect.Method.invoke(Method.java:565)\n\tat org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)\n\tat org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)\n\tat org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)\n\tat org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)\n\tat org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)\n\tat org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat org.junit.runners.Suite.runChild(Suite.java:128)\n\tat org.junit.runners.Suite.runChild(Suite.java:27)\n\tat org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)\n\tat org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)\n\tat org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)\n\tat org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)\n\tat org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)\n\tat org.junit.runners.ParentRunner.run(ParentRunner.java:363)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:137)\n\tat org.junit.runner.JUnitCore.run(JUnitCore.java:115)\n\tat org.junit.runner.JUnitCore.runMain(JUnitCore.java:77)\n\tat org.junit.runner.JUnitCore.main(JUnitCore.java:36)\nCaused by: java.lang.AssertionError: expected:<1> but was:<0>\n\tat org.junit.Assert.fail(Assert.java:88)\n\tat org.junit.Assert.failNotEquals(Assert.java:834)\n\tat org.junit.Assert.assertEquals(Assert.java:118)\n\tat org.junit.Assert.assertEquals(Assert.java:144)\n\tat org.junit.internal.ExactComparisonCriteria.assertElementsEqual(ExactComparisonCriteria.java:8)\n\tat org.junit.internal.ComparisonCriteria.arrayEquals(ComparisonCriteria.java:53)\n\t... 31 more\n\nFAILURES!!!\nTests run: 28,  Failures: 1\n\n\n"}