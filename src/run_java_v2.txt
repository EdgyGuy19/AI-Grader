pub fn run_java_tests(
    students_src: &Path,
    tests_dir: &Path,
    jars_dir: &Path,
) -> Result<String, Box<dyn std::error::Error>> {
    //1. Copy the tests from the directory and jars files
    let mut junit_jar: Option<PathBuf> = None;
    let mut hamcrest_jar: Option<PathBuf> = None;
    let mut java_path = Vec::new();
    let mut test_path = Vec::new();

    for file in fs::read_dir(tests_dir)? {
        let file = file?;
        let path = file.path();
        if path.is_file() {
            let filename = path.to_string_lossy();
            if filename.ends_with("Test.java") {
                test_path.push(path);
            }
        }
    }

    for file in fs::read_dir(jars_dir)? {
        let file = file?;
        let path = file.path();
        let class_name = path.to_string_lossy();
        if class_name.contains("junit") {
            junit_jar = Some(path);
        } else {
            hamcrest_jar = Some(path);
        }
    }
    for file in fs::read_dir(students_src)? {
        let file = file?;
        let path = file.path();
        if path.is_file() {
            let filename = path.to_string_lossy();
            if filename.ends_with(".java") && !filename.ends_with("Test.java") {
                java_path.push(path);
            }
        }
    }

    // Compile to the current directory instead of a 'classes' subdirectory
    let compilation_dir_name = students_src
        .to_str()
        .expect("Path is not valid UTF-8")
        .to_string();

    let junit_jar = junit_jar.expect("JUnit jar not found in jars_dir");
    let hamcrest_jar = hamcrest_jar.expect("Hamcrest jar not found in jars_dir");

    let junit_str = junit_jar
        .to_str()
        .expect("JUnit jar path is not valid UTF-8")
        .to_string();
    let hamcrest_str = hamcrest_jar
        .to_str()
        .expect("Hamcrest jar path is not valid UTF-8")
        .to_string();

    let jars_str = format!("{}:{}", junit_str, hamcrest_str);

    //2. Compile all the java files

    let mut java_args = vec![
        "-d".to_string(),
        compilation_dir_name.to_string(),
        "-cp".to_string(),
        jars_str,
    ];

    java_args.extend(java_path.iter().map(|p| p.to_string_lossy().into_owned()));
    java_args.extend(test_path.iter().map(|p| p.to_string_lossy().into_owned()));

    let _compile = Command::new("javac")
        .args(&java_args)
        .stdout(std::process::Stdio::inherit())
        .stderr(std::process::Stdio::inherit())
        .status()?;

    //3. Run the tests
    let test_classes = find_test_classes(tests_dir.to_path_buf())?;
    let jars_to_comp = format!("{}:{}:{}", compilation_dir_name, junit_str, hamcrest_str);
    let mut run_args = vec![
        "-cp".to_string(),
        jars_to_comp,
        "org.junit.runner.JUnitCore".to_string(),
    ];
    run_args.extend(test_classes.clone());

    let run = Command::new("java").args(&run_args).output()?;

    //4. Return test results
    let stdout = String::from_utf8_lossy(&run.stdout);
    let stderr = String::from_utf8_lossy(&run.stderr);
    if !stdout.is_empty() {
        Ok(stdout.to_string())
    } else {
        Ok(stderr.to_string())
    }
}
